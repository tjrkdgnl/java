*자바 1 장

1. 일반 high language는 컴파일러가 바로 machine language 로 바꾸기 때문에 특정 컴퓨터마다 컴파일러가 다 다르다.
2. java는 java virtual machine의 가상 컴퓨터의 machine language로 바꾼다. 이를 byte-code라 하며 이는 java program이 깔려
있기만 하면 어느 컴퓨터든지 별도의 컴파일러 없이도 모두 수행 되어질 수 있다.

-high language는 컴파일러에 의해 바로 machine language로 바뀌기 떄문에 특점 컴퓨터마다 컴파일러가 다 다르다.
하지만 자바는 java virtual machine을 이용하여 가상 컴퓨터의 machine language인 byte-code를 생성하고 이를 각기 컴퓨터에서
컴파일하기 때문에 프로그램만 깔려있다면 어느 컴퓨터에서든지 컴파일이 가능하다. 

3.interpreter : java 의 byte-code 를 컴퓨터의 machine language로 바꿔주는 역할을 한다.

4. java program은 작은 class들로 나눠져 있다.
5. Class Loader: 자바 프로그램이 실행될 때 필요로 하는 Class의 byte코드가 연결된 프로그램을 연결 시켜주는 역할 
즉 런타임시, 자바의 클래스를 연결하여 객체를 생성해주고 JVM에 로딩해 준다.
-> 다른 프로그램에서는 linker라 한다.

6.확장자
 - .java : 작성된 자바 파일
 - .class : 자바 파일로 작성된 코드를 컴퓨터가 읽을 수 있게 기계어로 바뀐 파일(byte-code로 변경)
cf) javac : 자바 파일을 컴파일하는 명령어

7. identifiers : 프로그램에서 미리 정의가 되어있는 name들 ( 변수명, class명 , methods명,object명 etc)
 - rate , RATE ,Rate 모두 다른 이름
 - keywords or Reserved word : public ,static ,void ,class = > 절대 의미 변경할 수 없음.
 - Predefined identifiers :  System, String, println =>의미를 바꿀 순 있지만 자바 표준을 따르는 라이브러리에
 정의된 것이므로 혼란과 위험성이 존재

8. naming
- Lowercase : variable, method,object명 또는 단어와 단어의 경계는 uppercase로 쓴다.
- Uppercase : Class명은 첫 단어가 대문자로 시작

9. constant(literal) : 변경 되지 않는 값. 각 타입에 맞게 선언 (int형은 int constant ,String은 string 형 constant) 

10. String : 자바에서는 String은 primitive type이 아닌 predefined class이다.
- String은 + operation을 통해 더 긴 string으로 쓸수 있다.
- String은 거의 모든 type을과 같이 +operaion을 쓸 수 있다. -> 그 결과는 string 형식이다
ex) "hello world" + 42 => "hello world 42"
cf) white space, tab, 줄바꿈 등은 모두 문자로 취급한다.`

11. class : 값이 객체인 유형 - > 빵틀 같은 것
12. object: 데이터를 저장하고 method를 통해 action을 취하는 엔터티
ex)System.out.println = class.object.method

13.String method
-str.charAt(idx) => idx에 숫자를 넣으면 그 idx위치의 단일 문자 출력
-str.substring(start,end) => start 포함 ~ end전까지 문자열 출력 / str.substring(start) => start 위치에서부터 끝까지 문자열 출력.
-str.indexOf(string) = > 원하는string을 쓰면 string의 시작 위치를 반환(원하는 string의 일부만 써도 찾아서 시작위치반환) / 오류시 -1
-str.indexOf(string, int start) = > start의 위치에서에서 시작해 원하는 string의 시작 위치를 반환 / 오류시 -1
-str.lastIndexOf(string) => 맨 마지막에 있는 argument string을 찾음.
-str.trim() = > str 문자열에 있는 공백값(tab, space, 여백) 모두 제거 후 string return
-str.compareTo(string) => 사전적으로 string 첫번째부터 비교해 나가서 일치하면 0, 자신을 기준으로 argument의 첫 단어부터 뒤에있으면  negative or 앞쪽이면  positive / 똑같으면 계속 다음 단일 string을 비교해서 양수,음수 판별 -> 한 단일 문자만 틀리다면 그 단일 문자의 idx의 차 값을 리턴한다.
str.compareToIgnoreCase(string) => string 비교에 있어서 대문자를 소문자와 같게 생각하고 판단( A = a)

14. primitive type
- boolean 1byte
- byte 1byte (integer)
- char 2byte
- short 2byte (integer)
- int 4byte
- long 8byte (integer)
- float 4byte
- double 8byte

*자바 2 장

1.format specifier  
: 각 자료형 타입에 맞는 형식 지정자를 사용해야함
ex)double num = 1234.888456789;

%f  : decimal 모두 표현하고 소수점 6번째까지 표현(7번째에서 반올림) - type이 double형일때만 반올림 float type일때는 적용 x 
if) "%.4f"는 1234.8885 -> 5번째 자리에서 반올림하여 4번째 자리까지 표현

%e :한자리의 decimal과  두번째 decimal부터 포함한 6개의 소수로 표현 - 소수점 끝에는 e + 숫자(이 숫자는 원래 두번째 decimal에서 몇개가 소수로 되었는지를 의미한다. 
if) "%.4e"는 1.2349e + 03 -> 4번째 자리까지 나오고 5번째에서 반올림 표현 

%g : 1234.89 decimal 개수를 포함해서 6개 표현 ->7번째에서 반올림 
if) "%.5g"는 1234.9 -> 원하는 자리까지 출력하되 6번째에서 반올림

cf) %n = \n  = enter key

2. Packages : 비슷한 기능을 하는 class들을 한곳으로 묶어 놓은 것.
cf)java.lang은 자동적으로 import를 하기때문에 별도의 선언없이도 사용이 가능

3.Scanner class 
-nextInt() : int형 값을 입력 받을 수 있다.
-nextDouble() : double형 값을 입력 받을 수 있다.
-next() : String 형식의 값을 입력받을 수 있다.
cf) 여러 값을 한번에 입력 받을때는 여백(space, 줄바꿈(enter), tab)을 통해 구분한다. -> debug창에 공백으로 구분 짓음.
cf) 위의 methods들은 type에 맞는 값을 가져오다가 여백을만나면 그전까지만 값을 가져오기 때문에 버퍼에 공백값이 아직 남아있다.
또 위의 method 중에 하나값을 입력받고 위에 method 중에 하나를 또 입력 받을 시, 버퍼에 남은 여백값은 구분을 짓는 용도로 여백을 사용하기 때문에  아무 문제없이 입력 받을 수 있다. 

-nextLine() : String 형식의 값을받음 -> keyboard에 입력받은 모든 것들을 변수에 지정하기 때문에 enter값까지 변수에 저장을 한다.
cf) nextInt(),nextDouble(),next()명령어들은 버퍼에 enter값을 남기기 때문에 이후에 nextLine명령어가 오면 이 엔터값을 받기 때문에 버퍼를 비우는 
역할을 할 수 있다. 

*3장

1. == operation은 primitive type일때는 제대로 된 값을 비교한다. 하지만 객체인 경우, ==operation은 같은 메모리상에 할당이 되는지를 판단하기때문에 값을 비교하는 것이아닌 ,주소값을 비교한다. 
-> 따라서 객체의 값을 비교하기 위해서는 equals 명령어를 사용해야한다.


*4장

1.class
-어떤 객체의 변수와 method들의 집합이다.
-class는 사용자정의의 type이다.
-이런 type으로 생성된 변수를 reference variable or object(new연산으로 할당 받을시)라한다. 
-> class안에서 생성된 variable을 instance variable or field라 한다.

2.methods
- heading(함수 이름) 과 body(작동되는 코드들)로 나눠진다.
-return을 하지 않는 method를 action이라 한다. 즉 자료형 type이 void인 것을 의미한다.
-main도 void method이다.

3.Local variable : method안에서 생성된 variable들을 의미한다.
- method 각각에서 생성된 변수의 이름이 같아도 각기 다른 역할로 수행된다. -> 다형성
- 자바에서는 grobal variable(전역변수)이 존재하지 않는다.

4.block : 복합 명령문의 다른 이름이다. 즉 중괄호({})로 묶인 것들을 의미한다.
-> block 내에서 선언된 것들은 block 내부에서만 사용되는 local이므로 block 밖에선 사용이 불가능하다.  -> class 내부의 값을 다른 class에서 사용x
-> block 내에서 선언된 변수의 이름이 중복될 수없다.

5.this prameter : 모든 instance variable은 앞에 호출객체.instance variable을 의미하는데 이때 호출객체를 의미하는 것이 바로 this이다.

6.information Hiding(정보 은닉) : 클래스 내부에 공개될 필요가 없거나 변경되어서는 안되는 값을 감추는 것.
cf)추상화는 정보 과부하를 피하기위해 세부사항을 버린다는 개념으로 사용되는 또다른 용어이다.

7.Encapsulation : class의 object와 method를 single unit으로 결합하여 구현 세부사항을 숨기는 것 -> 중요시 여겨지는 instance variable이나 
사용자가 쓸일 없는 method들을 private으로 바꿔 외부에서 사용할 수 없게끔 만들어 놓은것이다.

= 잘 정의되고 간단한 인터페이스를 통해 상호작용하므로 구현의 세부사항을 알 필요가 없음.

8 API 와 ADT
-API (Application Programming Interface) : class에 대한 api는 class를 어떻게 사용하는지에 대한 기술을 정의한 것이다. 즉 api는 사용법을 기술
해 놓은것이다. ->구현의 세부사항까지 모두 알려줌.

-ADT(Abstract Date Type) : 사용자가 직접 정의한 type을 의미한다. 즉 ADT를 사용하면 information-hiding 기술을 사용하기에 적합하다.

9. Modifier
- public : 1)모든 instance variable 과 method들이 접근이 가능하다. 2) 대부분 method들이 public으로 선언된다.(제한된 접근을 제공하며)
cf)private으로 설정된 method들은 일반적으로 같은 class 내에 method들을 surpport하는 용도로만 쓴다.

- private : 1)다른 클래스의 instance variable or method 들이 접근할 수 없다. 2)주로 instance variable이 모두 private

10. accessor 와 mutator
-accessor : get
-mutator : set

11. overloading : 같은 이름을 가지는 method들  -> parameter(signature) 값만 다르고 name은 같다.
- 정확하지 않은 signature를 보내면 자동 형 변환이 일어난다.(parameter는 int형인데 argument는 double형인 경우)
- 때문에 원치 않은 결과가 나올 수 있다.
- parameter의 유형과 sigature가 중요하지 return type이 무엇인지는 상관하지않는다. 
- 단 overloading 하고자하는 method들의 반환형은 같아야한다.

12. Constructor : instance variable을 초기화 할 수 있는 special method
- class의 name과 반드시 같게 씌여야 한다.
- constructor는 return type이 존재하지 않고 심지어 void 형도 아니다.
- constructor는 전형적으로 overload가 된다.
- new 연산자의 argument 값을 받고 이를 통해 객체를 생성한다. 또한 method도 호출이 가능하다.
- constructor는 다른 method들 처럼 호출 될 수 없다. -> 따라서 new 연산자에 argument를 전달하여 객체를 생성하는 방식
- constructor에 인수값이 없으면 인수값이 없는 default constructor를 생성하여 default값을 가진 객체를 생성해 준다.(보통 new 연산자랑 같이 쓰니까 객체를 만들어주는거지) -> boolean은 false로 나머지 primitive type은 각 유형에 맞는 0으로, class type은 null로 default 초기화한다.

*5장

1. static method
- static method는 호출객체 필요없이 직접 Class name을 통해 접근이 가능하다.
- static method는 instance variable을 참조할 수 없고 non-static method를 호출할 수 없다. -> static method는 호출 가능하다.
-this calling object를 갖지 않음. -> 같은 class 내에서 static method가 다른 static method를 호출하는 것은 (this.)static method가 아닌
(ClassName.)static method이다.
- static method는 instance variable을 참조할 수없지만 static instance variable을 참조할 순 있다.

2.static variable
- static variable은 하나의 객체가 아닌 class 전체에 속하는 변수이다.
- Class 내 모든 변수는 static variable을 읽고 변경할 수 있다.
- 초기 선언시, 값을 할당하지 않으면 자동으로 각 타입에 맞는 default값을 할당한다. -> 초기값을 할당하는 것을 권장한다.
-항상 private으로 선언되어야 한다.
-static variable은 class내에 모든 method내에서 사용되어 질 수 있다.
cf) 만약에 절대불변의 값 예를 들면 pi같은 값들은 변하지 않고 사용될 수 있어야하기 때문에 public으로 modifier를 설정 해 준다.
만약 constant생성시에는 final을 head에 꼭 붙인다. ex) public static final double pi =3.14;

3.Math class
- java.lang 에 속해있기 때문에 import를 하지않고도 사용할 수 있다.
- 모든 method 들이 static이므로 calling object를 사용하지않고 Math Class name을 사용한다.
-Math class에서 미리 정의된 constant가 존재하는데 이는 E와 PI이다.

-Math.pow(double a, double b) = a ^b;
-Math.abs(int,long,float,double a) = | a | 
-Math.min(int,long float,double a,b) = 둘 중 작은것 return 
-Math.max(int,long,float,double a,b) = 둘 중 큰것 return
-Math.round(float, double a) = 반올림한 값을 return
-Math.ceil(double a) = 최소한의 값이 argument값으로 한정. 즉, 올림값  ex) a= 3.2 , return 4 // a= -3.2 , return -3;
-Math.floor(double a) = 최대한의 값이 argument값으로 한정. 즉, 내림값 ex) a= 3.12 ,return 3; // a=-3.12 ,return -4; 
-Math.sqrt(double a)  = 루트를 씌운 값으로 return
-Math.random() = 0.0과 같거나 최대 1.0 사이의 값을 return  

4.Wrapper Class : primitive type형을 객체화 시킨것을 의미한다.
-boxing : primitive type -> object가 되는것 ex) integer a = new integer(32);
-unboxing : object -> primitive type -> object에 들어있는 값을 primitive type으로 정의된 변수에 넣는 것. ex) int a = wrapperint.intValue();
-wrapper class는 유용한 사전정의된 constant와 static method들이 존재한다.
-인수에 반드시 값이 들어가야한다. 인수가 없는 wapper class는 존재하지않는다. 
-wrapper class는 primitive type에 맞는 값을 저장하기 위한 instance varialbe이 존재한다.
-unboxing에 사용되는 wrapper class의 method들은 인수값들을 갖지 않는다.
-Boolean, Byte, Character, Short, Integer, Long, Float, Double
-string type을 해당 primitive type으로 변경하는 static method들이 존재 
ex) Integer.parseInt(), Long.parseLong(), Float.parseFloat(), Double.parseDouble();  주의!! Character,Byte형은 없음
-해당 primitive type에 맞게 string 형식으로 바꿔주는 method들도 있다. 
ex)Long.toString(333333);

4-1. automatic boxing and unboxing
- boxing : new operation을 사용하지 않고도 자동적으로 boxing이 가능하다 ex) integer a = 42;
- unboxing : 값을 출력하는 method(intValue())를 쓰지않고도 unboxing이 가능하다 ex) int b = a;

5. Reference
- 변수에 address가 담기는 것을 의미
-primitive type의 변수는 고정된 byte 메모리 크기를 갖는다.
-Reference 변수는 다양한 주소크기를 갖는다.
- =operation은 주소값을 공유하기 때문에 어떤 하나의 변수가 바뀌면 할당연사자를 쓴 변수도 값이 변경된다.
cf)각각의 reference variable의 메모리에는 같은 주소가 들어가게 된다.
- == operation은 주소값이 같은지를 판별한다. -> equals method를 사용하면 두 reference variable의 값을 비교할 수 있다.
- java에서는 call-by-value만이 존재한다. (address를 매개변수로 넘겨주는 것 또한 call-by-value이다) -> 이유는
address안에 있는 값을 변경하는 것이지 할당받은 값을 변경하지 않기 때문이다.

6. null : 특별한 constant이지 object가 아니다. 단지 memory address를 가르키지 않고 있다는 뜻이다.
-주로 class type의 instance variable를 어떤 object로 생성해야 할 지  모를 때 사용.

7. anonymous new operator : 변수에 memory address를 할당하지 않고 new operation을 통해 1회만 사용하는 용도로 쓰이는것
ex) variable1.equals(new Over(1));

8. mutable vs immutable
-mutable: modifier가 public인 mutator method가 존재하는 class라면 instance variable을 변경할 수 있기때문에 이는 mutable class라 할 수있다.
또 그것의 object는 mutable object라 할 수 있다.
-immutable: mutator를 제공하는 함수가 존재하지 않음. 즉 첫 할당값이 불변의 값. ex) String class 

9. Deep copy vs Shallow copy
-deep copy : 공통된 reference 참조가 이루어 지지않는 구조를 가진 object를 복사하는것. 단 immutable variable은 공유 가능
-shallow copy : reference 참조가 이뤄져 값이 변경될 가능성이 있는 copy하는 것. -> date sharing이라고도 하며 메모리를 절약할 수 있다.
privacy leak이 일어날 수 있는 copy
cf) String str = Over.str; 이때 str에는 Over.str의 복사본을 copy하기 때문에 str값을 바꿔도 원본인 Over.str의 값은 변경되지 않는다.(immutable)

10. Package and import
-package는 java에서 관련 기능에 따라 클래스를 계층구조로 연결하는 방법이다.
-package는 반드시 import문 앞에 선언되어야 한다.
-package보다 앞서서 쓸 수 있는건 개행과 주석 뿐이다.
-import전에는 개행과 주석, package문만 올 수 있다. 기타 변수라든지 이런거 못옴.
-import문을 통해 class 그룹에 있는 모든 class를 사용 할 수 있다. 이때 overhead는 일어나지 않음을 주의해야한다.
cf) java.lang 에는 String,Math, Wrapper class들이 포함되어져 있기 때문에 따로 선언하지않는다.
- .java 파일은 어디에 위치하든 상관없지만 .class파일은 디렉터리나 폴더 안에 반드시 위치해야한다.
- 자바는 package directory를 찾기위해 두가지가 필요하다. 1)package의 이름 2)classpath의 value
-classpath란 JVM이 프로그램을 실행할때 클래스 파일을 찾는데 기준이 되는 파일 경로를 뜻함.
-> 미리 정의되어져 있다. ex).java를 컴파일하면 .class파일이 생성되는데 이는 bin directory에 저장이 된다.이때 .class 파일을  컴파일하고자 하면 bin경로를 사전에 알고 있어야 class를 찾을 수가 있다.

ex)import java.util.Scanner -> java.util는 package 명, Scanner는 class 명

11. Default Package
:프로젝트 생성 시, package의 이름을 지정하지 않으면 모든 class들은 기본 패키지에 들어가게됨.
-default package 안에 있는 class는 다른 package에서 import 불가능하다.
-default package안에서는 다른 package의 class import 가능.
-defalut package 안에 있는 class는 import하지 않고도 사용이 가능하다.

12. Name clash
: 여러 사람이 작성하는 java는 각각의 사람이 package를 만들 수 있다. 이때 다른 package에서 같은 이름의 class가 존재 할 수 있는데 이때, 구분 짓을 수 있는 방법 하나는 객체 생성시, package의 풀네임을 붙여서 구분 짓는 방법이 있다. -> 풀네임으로 객체를 생성했다면 별도의 import로 해당 class를 가져 올 필요는 없다.

ex) package A 와 B 에 complainclass가 있다면 
A.complainclass object1 = new A.complainclass();
B.complaionclass object2 =new B.complainclass();

*6장

1. Array (int[] arr = new int[5] , String[] arr = new String[5];)
: 모두 같은 타입의 데이터를 모아둔 것. cf)파이썬에서는 다른 타입도 한배열에 쓸 수 있지만 자바에서는 c와 같게 한 종류의 type으로 배열을 만든다.

-배열을 구성하는 각각의 변수는 indexed variable이라고 불러진다. 또한 배열의 element , subscripted variable이라고도 한다.
-arr[index or subscript]
-배열의 index에는 음이 아닌 양수와 integer 값의 variable이 들어갈 수 있다.
-배열은 정적인 선언이기 때문에 동적으로 크기를 늘리거나 줄일 수 없다.
-배열의 선언도 결국 object의 생성이기 때문에 instance variable을 가질 수 있다.
-배열은 단 하나의 instance variable을 가지는데 이는 바로 length이다. (String 배열도 똑같음)
-length는 new 연산자를 통해 생성될 때 정해지는 불변의 값이므로 바뀌지 않는다.(new로 다시 생성하지 않는한!!)

-char형의 배열은 String처럼 보이지만 String형이 될 수 없다. 단 String 형식으로 객체화는 가능하다.
ex) char arr = {'a','b','c'};  String s = a; (x) => String s = new String(a); (o)
ps) String s = new String(arr,offset,count) 이렇게 받을 배열에서 특정범위만 String으로 변경이 가능하다.  
ex) String s = new String(arr,0,2) =ab;

-primitive type의 배열은 reference variable에 heap에 할당된 base address가 들어가고, 그리고 각각의 배열 값에는 value가 들어간다.
-class type의 배열은 reference variable에 heap에 할당된 base address가 들어가고, 각각의 배열에는 new 연산자로 인해 각각 별도로 생성된 heap address가 들어가게 된다. 따라서 값을 공유하는것이 아닌 각각의 heap영역의 주소가 들어가게 되는것이다.
cf) 두 타입 모두 new 연산자를 이용하여 default constructor를 사용하기 때문에 각각의 기본값으로 설정된다.

-class type의 배열에서는 
Over[] over = new Over[5]; -> 이것은 heap메모리에 Over size 5개를 공간을 할당해 준다는 것을 의미한다. 따라서 이때 생성되는 공간에는 null값이 생성되기 때문에 for문을 통해 각각의 자리에 다시한번 new 연산을 해줘서 공간 값을 할당 받게 해야한다. 

-for(int i =0 ; i<5; i++){
 over[i] = new Over("tjrkdgnl",1);
} -> 비로소 각 배열 변수에 address값을 할당. 이후에 사용했을땐 null 오류 안뜸.

-method의 argument에는 배열의 indexed variable이 올 수도 있고 배열 전체를 받을 수도있다.
ex) public void getvalue(Over[] arr) ->전체 배열을 받으려면 이렇게 type을 분명히 명시해야한다.
그럼 argument는 getvalue(over) -> 이렇게 레퍼런스 변수만 보내면 된다.

2. main의 argument
:매개변수로 Stirng[] args 의 String 배열을 받는다. 이때 매개변수는 args이기 때문에 다름 이름으로 바꿔도 상관없다.
-만약 main에서 매개변수를 받지 않는다면 이때 자바 프로그램은 자동으로 텅빈 String 배열을 제공받아 실행 시킨다.

3. 배열을 return 하는 method
ex)public int[] getArray()
{
  int[] str = new int[5];

  for(int i =0 ; i < 5 ; i++){
      str[i] = new int(someArray[i].i);
	
  return str ;
}

4. Enumerated Type
- 상수가 정의된 method 바깥에 정의된다. 같은곳에서 선언 x
-이 타입을 가지는 변수는 반드시 basetype.constant 형태를 가져야한다.
-이 타입의 값들은 모두 대문자로 구성되어야한다.
ex)enum WorkDay {MONDAY,TUESDAY}
WorkDay day = WorkDay.MONDAY;

-equals method나 ==연산자를 통해서 값 비교를 할 수 있다.
-main 문에서 enum 선언을 할 수 없다. 

5.Enumerated type의 method
1) equals(value) =return true / false;
2) ordinal() =  자기 자신의 index 반환 => day.ordinal(); return 0;
3) compareTo() = return negative or positive => day.compareTo(WorkDay.TUESDAY); return -1;
4) static values() = return Enumerated[]; => enum의 요소값에 맞게 배열을 생성
ex) WorkDay[] wo = WorkDay.values(); -> wo.length = 2 / 각배열은 enum element 순서로 저장.
5) valueOf(String value) = value에 값이 enum안에 있다면 return enum.Value 아니면 에러

6.2차원배열
ex)int[][] arr = new int[5][5];
-> 행은 열을 위한 포인터를 의미. 즉 값이 씌여지는건 열의 0번지부터 씌여짐.
-> 행은 각각 열의 시작 위치에 대한 address를 담고있는 포인터 변수라 할수있다.
-> arr.length는 포인터 행의 길이 즉 행의 길이만 의미한다.
-> arr[i].length는 행에대한 열의 길의 값을 의미한다.
-> method의 parameter에 전체값을 받기위해서, basetype[][] 을 분명히 명시해야한다.
